from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from keyboards import *
from database import *
from config import ADMIN_IDS

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
SELECTING_WHEEL, ENTERING_NAME, SELECTING_DATE, SELECTING_TIME, ENTERING_COMMENT = range(5)
CANCEL_SELECTING = range(1)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    
    if user_id in ADMIN_IDS:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
            reply_markup=get_admin_keyboard()
        )
    else:
        await update.message.reply_text(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–ø–∏—Å–∏!\n\n"
            "–ù–∞–∂–º–∏—Ç–µ '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è', —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è.",
            reply_markup=get_main_keyboard()
        )

async def book_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–ø–∏—Å–∏"""
    await update.message.reply_text(
        "üõû –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ–ª—ë—Å:",
        reply_markup=get_wheel_size_keyboard()
    )
    return SELECTING_WHEEL

async def wheel_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–ª—ë—Å"""
    query = update.callback_query
    await query.answer()
    
    wheel_size = query.data.replace("wheel_", "")
    context.user_data['wheel_size'] = wheel_size
    
    await query.edit_message_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω —Ä–∞–∑–º–µ—Ä: R{wheel_size}\n\n"
        "üë§ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )
    return ENTERING_NAME

async def name_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    client_name = update.message.text.strip()
    
    if len(client_name) < 2:
        await update.message.reply_text(
            "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è:"
        )
        return ENTERING_NAME
    
    context.user_data['client_name'] = client_name
    
    await update.message.reply_text(
        f"‚úÖ –ò–º—è: {client_name}\n\n"
        "üìÖ –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
        reply_markup=get_date_keyboard()
    )
    return SELECTING_DATE

async def date_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    query = update.callback_query
    await query.answer()
    
    date = query.data.replace("date_", "")
    context.user_data['date'] = date
    
    booked_times = get_booked_times(date)
    
    await query.edit_message_text(
        f"üìÖ –î–∞—Ç–∞: {date}\n\n"
        "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=get_time_keyboard(booked_times)
    )
    return SELECTING_TIME

async def time_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "back_to_wheels":
        await query.edit_message_text(
            "üõû –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∫–æ–ª—ë—Å:",
            reply_markup=get_wheel_size_keyboard()
        )
        return SELECTING_WHEEL
    
    time = query.data.replace("time_", "")
    context.user_data['time'] = time
    
    await query.edit_message_text(
        f"‚è∞ –í—Ä–µ–º—è: {time}\n\n"
        "üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ü—Ä–∏–µ–¥—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–ª—ë—Å–∞–º–∏')"
        "\n\n–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':",
        reply_markup=get_skip_comment_keyboard()
    )
    return ENTERING_COMMENT

async def comment_entered(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    comment = update.message.text.strip()
    
    if len(comment) > 200:
        await update.message.reply_text(
            "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–æ—Ä–æ—Ç–∏—Ç–µ:"
        )
        return ENTERING_COMMENT
    
    await save_and_confirm(update, context, comment)
    return ConversationHandler.END

async def comment_skipped(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    query = update.callback_query
    await query.answer()
    
    await query.delete_message()
    await save_and_confirm_via_context(update, context, "")
    return ConversationHandler.END

async def save_and_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE, comment: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""
    user = update.effective_user
    
    success = save_booking(
        user.id,
        user.username or user.first_name,
        context.user_data['client_name'],
        context.user_data['wheel_size'],
        context.user_data['date'],
        context.user_data['time'],
        comment
    )
    
    if success:
        await update.message.reply_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üë§ –ò–º—è: {context.user_data['client_name']}\n"
            f"üõû –†–∞–∑–º–µ—Ä –∫–æ–ª—ë—Å: R{context.user_data['wheel_size']}\n"
            f"üìÖ –î–∞—Ç–∞: {context.user_data['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {context.user_data['time']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '(–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)'}\n\n"
            f"–ñ–¥—ë–º –≤–∞—Å!"
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    context.user_data.clear()

async def save_and_confirm_via_context(update: Update, context: ContextTypes.DEFAULT_TYPE, comment: str):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ —á–µ—Ä–µ–∑ callback (–¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞)"""
    user = update.effective_user
    
    success = save_booking(
        user.id,
        user.username or user.first_name,
        context.user_data['client_name'],
        context.user_data['wheel_size'],
        context.user_data['date'],
        context.user_data['time'],
        comment
    )
    
    if success:
        await update.effective_chat.send_message(
            f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"üë§ –ò–º—è: {context.user_data['client_name']}\n"
            f"üõû –†–∞–∑–º–µ—Ä –∫–æ–ª—ë—Å: R{context.user_data['wheel_size']}\n"
            f"üìÖ –î–∞—Ç–∞: {context.user_data['date']}\n"
            f"‚è∞ –í—Ä–µ–º—è: {context.user_data['time']}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: (–Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω)\n\n"
            f"–ñ–¥—ë–º –≤–∞—Å!"
        )
    else:
        await update.effective_chat.send_message(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    context.user_data.clear()

async def my_bookings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    bookings = get_user_bookings(user_id)
    
    if not bookings:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
        return
    
    text = "üìã –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
    for i, booking in enumerate(bookings, 1):
        text += (
            f"{i}. üë§ {booking.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞', 'N/A')}\n"
            f"   üõû {booking['–†–∞–∑–º–µ—Ä –∫–æ–ª–µ—Å']} | "
            f"üìÖ {booking['–î–∞—Ç–∞']} ‚è∞ {booking['–í—Ä–µ–º—è']}\n\n"
        )
    
    await update.message.reply_text(text)

async def cancel_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏"""
    user_id = update.effective_user.id
    bookings = get_user_bookings(user_id)
    
    if not bookings:
        await update.message.reply_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return ConversationHandler.END
    
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–º–µ–Ω—ã:",
        reply_markup=get_cancel_booking_keyboard(bookings)
    )
    return CANCEL_SELECTING

async def cancel_booking_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "cancel_back":
        await query.edit_message_text("‚ùå –û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    
    parts = query.data.replace("cancel_", "").split("_")
    date = parts[0]
    time = parts[1]
    
    user_id = update.effective_user.id
    success = cancel_booking(user_id, date, time)
    
    if success:
        await query.edit_message_text(
            f"‚úÖ –ó–∞–ø–∏—Å—å –Ω–∞ {date} –≤ {time} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
    else:
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    return ConversationHandler.END

async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ –¥–∏–∞–ª–æ–≥–∞"""
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    context.user_data.clear()
    return ConversationHandler.END
