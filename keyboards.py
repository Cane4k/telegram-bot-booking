from telegram import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from config import WHEEL_SIZES, WORKING_HOURS
from datetime import datetime, timedelta

# –°–ø–∏—Å–æ–∫ –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì)
HOLIDAYS = [
    "01.01.2025",  # –ù–æ–≤—ã–π –≥–æ–¥
    "02.01.2025",
    "03.01.2025",
    "04.01.2025",
    "05.01.2025",
    "06.01.2025",
    "07.01.2025",
    "08.01.2025",  # –†–æ–∂–¥–µ—Å—Ç–≤–æ
    "23.02.2025",  # –î–µ–Ω—å –∑–∞—â–∏—Ç–Ω–∏–∫–∞ –û—Ç–µ—á–µ—Å—Ç–≤–∞
    "08.03.2025",  # –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π –∂–µ–Ω—Å–∫–∏–π –¥–µ–Ω—å
    "01.05.2025",  # –ü—Ä–∞–∑–¥–Ω–∏–∫ –í–µ—Å–Ω—ã –∏ –¢—Ä—É–¥–∞
    "09.05.2025",  # –î–µ–Ω—å –ü–æ–±–µ–¥—ã
    "12.06.2025",  # –î–µ–Ω—å –†–æ—Å—Å–∏–∏
    "04.11.2025",  # –î–µ–Ω—å –Ω–∞—Ä–æ–¥–Ω–æ–≥–æ –µ–¥–∏–Ω—Å—Ç–≤–∞
]

def get_main_keyboard():
    """–ì–ª–∞–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    keyboard = [
        ['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è'],
        ['üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_admin_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = [
        ['üìÖ –°–µ–≥–æ–¥–Ω—è', 'üìÜ –ó–∞–≤—Ç—Ä–∞'],
        ['üìä –ù–∞ –Ω–µ–¥–µ–ª—é', 'üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å'],
        ['üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

def get_wheel_size_keyboard():
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–ª—ë—Å"""
    keyboard = []
    row = []
    for i, size in enumerate(WHEEL_SIZES):
        row.append(InlineKeyboardButton(f"R{size}", callback_data=f"wheel_{size}"))
        if (i + 1) % 3 == 0:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    
    return InlineKeyboardMarkup(keyboard)

def get_date_keyboard():
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü, –∏—Å–∫–ª—é—á–∞—è –≤—ã—Ö–æ–¥–Ω—ã–µ –∏ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏"""
    keyboard = []
    today = datetime.now()
    
    for i in range(31):  # –ë–ª–∏–∂–∞–π—à–∏–µ 31 –¥–µ–Ω—å
        date = today + timedelta(days=i)
        date_str = date.strftime("%d.%m.%Y")
        weekday = date.weekday()  # 0=–ü–Ω, 6=–í—Å
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ
        if weekday >= 5:
            continue
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∞–∑–¥–Ω–∏–∫–∏
        if date_str in HOLIDAYS:
            continue
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
        day_names = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        button_text = f"{day_names[weekday]} {date_str}"
        
        if i == 0:
            button_text = f"–°–µ–≥–æ–¥–Ω—è {date_str}"
        elif i == 1:
            button_text = f"–ó–∞–≤—Ç—Ä–∞ {date_str}"
        
        keyboard.append([InlineKeyboardButton(
            button_text, 
            callback_data=f"date_{date_str}"
        )])
    
    return InlineKeyboardMarkup(keyboard)

def get_time_keyboard(booked_times=[]):
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ)"""
    keyboard = []
    row = []
    available_count = 0
    
    for i, time in enumerate(WORKING_HOURS):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–±–æ–¥–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞
        if time not in booked_times:
            row.append(InlineKeyboardButton(time, callback_data=f"time_{time}"))
            available_count += 1
            
            # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
            if (available_count) % 3 == 0:
                keyboard.append(row)
                row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
    if row:
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_wheels")])
    return InlineKeyboardMarkup(keyboard)

def get_cancel_booking_keyboard(bookings):
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ—Ç–º–µ–Ω—ã"""
    keyboard = []
    
    for booking in bookings:
        button_text = f"{booking['–†–∞–∑–º–µ—Ä –∫–æ–ª–µ—Å']} | {booking['–î–∞—Ç–∞']} {booking['–í—Ä–µ–º—è']}"
        callback_data = f"cancel_{booking['–î–∞—Ç–∞']}_{booking['–í—Ä–µ–º—è']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_back")])
    return InlineKeyboardMarkup(keyboard)

def get_delete_booking_keyboard(bookings):
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    keyboard = []
    
    for booking in bookings:
        button_text = f"{booking['–î–∞—Ç–∞']} {booking['–í—Ä–µ–º—è']} - {booking.get('–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞', 'N/A')} ({booking['–†–∞–∑–º–µ—Ä –∫–æ–ª–µ—Å']})"
        callback_data = f"admin_delete_{booking['–î–∞—Ç–∞']}_{booking['–í—Ä–µ–º—è']}"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=callback_data)])
    
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_delete_back")])
    return InlineKeyboardMarkup(keyboard)

def get_skip_comment_keyboard():
    """Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    keyboard = [
        [InlineKeyboardButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]
    ]
    return InlineKeyboardMarkup(keyboard)
