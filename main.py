import logging
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    ConversationHandler,
    filters
)
from config import TELEGRAM_TOKEN, ADMIN_IDS
from handlers.user_handlers import *
from handlers.admin_handlers import *

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("ü§ñ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # –ö–æ–º–∞–Ω–¥–∞ /start (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤–æ–π!)
    application.add_handler(CommandHandler("start", start))
    
    # ConversationHandler –¥–ª—è –∑–∞–ø–∏—Å–∏
    booking_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è$"), book_start)
        ],
        states={
            SELECTING_WHEEL: [
                CallbackQueryHandler(wheel_selected, pattern="^wheel_")
            ],
            ENTERING_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, name_entered)
            ],
            SELECTING_DATE: [
                CallbackQueryHandler(date_selected, pattern="^date_")
            ],
            SELECTING_TIME: [
                CallbackQueryHandler(time_selected, pattern="^(time_|back_)")
            ],
            ENTERING_COMMENT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, comment_entered),
                CallbackQueryHandler(comment_skipped, pattern="^skip_comment$")
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_command)
        ]
    )
    
    # ConversationHandler –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    cancel_conv = ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å$"), cancel_start)
        ],
        states={
            CANCEL_SELECTING: [
                CallbackQueryHandler(cancel_booking_selected, pattern="^(cancel_)")
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_command)
        ]
    )
    
    # ConversationHandler –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –∞–¥–º–∏–Ω–æ–º
    admin_delete_conv = ConversationHandler(
        entry_points=[
            MessageHandler(
                filters.Regex("^üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å$") & filters.User(ADMIN_IDS), 
                admin_delete_start
            )
        ],
        states={
            SELECTING_BOOKING_TO_DELETE: [
                CallbackQueryHandler(admin_delete_booking_selected, pattern="^(admin_delete_)")
            ],
        },
        fallbacks=[
            CommandHandler('cancel', cancel_command)
        ]
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º ConversationHandlers
    application.add_handler(booking_conv)
    application.add_handler(cancel_conv)
    application.add_handler(admin_delete_conv)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–Ω–æ–ø–∫–∞ "–ú–æ–∏ –∑–∞–ø–∏—Å–∏"
    application.add_handler(
        MessageHandler(filters.Regex("^üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏$"), my_bookings)
    )
    
    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    application.add_handler(
        MessageHandler(
            filters.Regex("^üìÖ –°–µ–≥–æ–¥–Ω—è$") & filters.User(ADMIN_IDS), 
            admin_today_bookings
        )
    )
    application.add_handler(
        MessageHandler(
            filters.Regex("^üìÜ –ó–∞–≤—Ç—Ä–∞$") & filters.User(ADMIN_IDS), 
            admin_tomorrow_bookings
        )
    )
    application.add_handler(
        MessageHandler(
            filters.Regex("^üìä –ù–∞ –Ω–µ–¥–µ–ª—é$") & filters.User(ADMIN_IDS), 
            admin_week_bookings
        )
    )
    application.add_handler(
        MessageHandler(
            filters.Regex("^üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è$") & filters.User(ADMIN_IDS), 
            admin_to_user_mode
        )
    )
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()